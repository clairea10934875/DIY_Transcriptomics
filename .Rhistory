setRepositories()
install.packages("beepr")
library(rhdf5) #provides functions for handling hdf5 file formats (kallisto outputs bootstraps in this format)
install.packages("rhdf5")
install.packages("tximport")
install.packages("ensembldb")
install.packages("tidyverse")
install.packages("EnsDb.Hsapiens.v86")
library(rhdf5) #provides functions for handling hdf5 file formats (kallisto outputs bootstraps in this format)
library(tidyverse) # provides access to Hadley Wickham's collection of R packages for data science, which we will use throughout the course
library(tximport) # package for getting Kallisto results into R
library(ensembldb) #helps deal with ensembl
library(EnsDb.Hsapiens.v86) #replace with your organism-specific database package
library(beepr) #just for fun
library(rhdf5) #provides functions for handling hdf5 file formats (kallisto outputs bootstraps in this format)
library(tidyverse) # provides access to Hadley Wickham's collection of R packages for data science, which we will use throughout the course
library(tximport) # package for getting Kallisto results into R
library(ensembldb) #helps deal with ensembl
library(EnsDb.Hsapiens.v86) #replace with your organism-specific database package
library(beepr) #just for fun
library(datapasta)
install.packages("datapasta")
library(datapasta) #makes it easy to copy and paste data into R
# read in your study design ----
#there are LOTS of ways to read data into R, but the readr package (from tidyverse) is one of the simplest
targets <- read_tsv("studydesign.txt")
spec()
View(targets)
# you can easily create file paths to the abundance files generated by Kallisto using the 'file.path' function
path <- file.path(targets$sample, "abundance.tsv") # set file paths to your mapped data
path
file.exists(path)
# now check to make sure this path is correct by seeing if the files exist
all(file.exists(path))
# get annotations using organism-specific package ----
Tx <- transcripts(EnsDb.Hsapiens.v86, columns=c("tx_id", "gene_name"))
Tx <- as_tibble(Tx)
#need to change first column name to 'target_id'
Tx <- dplyr::rename(Tx, target_id = tx_id)
#transcrip ID needs to be the first column in the dataframe
Tx <- dplyr::select(Tx, "target_id", "gene_name")
# import Kallisto transcript counts into R using Tximport ----
# copy the abundance files to the working directory and rename so that each sample has a unique name
Txi_gene <- tximport(path,
type = "kallisto",
tx2gene = Tx,
txOut = FALSE, #How does the result change if this =FALSE vs =TRUE?
countsFromAbundance = "lengthScaledTPM",
ignoreTxVersion = TRUE)
beep(sound = 6)
#take a look at the type of object you just created
class(Txi_gene)
names(Txi_gene)
print("Step 1 complete!")
# OPTIONAL: get annotations using BiomaRt----
# The annotation method described in the code chunk above works great if an organism-specific data base package exists for your organisms of interest
# however, this is only the case for human, mouse and rat....
# so, this optional code chunk shows one way you can get annotation data for other target organisms
# in this example, we're retrieving 1:1 mappings between transcript identifiers and gene symbols for the domesticated dog (Canis familiaris)
library(biomaRt) # an alternative for annotation
listMarts() #default host is ensembl.org, and most current release of mammalian genomes
#listMarts(host="parasite.wormbase.org") #access to parasite worm genomes
#listMarts(host="protists.ensembl.org") #access to protozoan genomes
listMarts(host="ferret.ensembl.org") #access to plant genomes
#choose the 'mart' you want to work with
myMart <- useMart(biomart="ENSEMBL_MART_ENSEMBL")
#take a look at all available datasets within the selected mart
available.datasets <- listDatasets(myMart)
View(myMart)
myMart
#take a look at all available datasets within the selected mart
available.datasets <- listDatasets(myMart)
available.datasets
fettet.anno <- useMart(biomart="ENSEMBL_MART_ENSEMBL", dataset = "mpfuro_gene_ensembl")
fetter.attributes <- listAttributes(fettet.anno)
ferret.attributes <- listAttributes(fettet.anno)
Tx.fetter <- getBM(attributes=c('ensembl_transcript_id_version',
'external_gene_name'),
mart = fettet.anno)
Tx.ferret <- getBM(attributes=c('ensembl_transcript_id_version',
'external_gene_name'),
mart = fettet.anno)
Tx.ferret <- as_tibble(Tx.fetter)
Tx.ferret <- dplyr::rename(Tx.ferret, target_id = ensembl_transcript_id_version,
gene_name = external_gene_name)
Tx.ferret
View(Tx.ferret)
Tx.ferret <- getBM(
mart = fettet.anno)
View(fettet.anno)
View(ferret.attributes)
Tx.ferret <- getBM(attributes=c('ensembl_transcript_id_version',
'start_position',
'end_position',
'description',
'external_gene_name',
'entrez_gene_id',
'pfam'),
mart = fettet.anno)
Tx.ferret <- getBM(attributes=c('ensembl_transcript_id_version',
'start_position',
'end_position',
'description',
'external_gene_name',
'entrezgene_id',
'pfam'),
mart = fettet.anno)
Tx.ferret <- as_tibble(Tx.fetter)
View(Tx.ferret)
View(Tx.fetter)
View(Tx.ferret)
Tx.ferret <- getBM(attributes=c('ensembl_transcript_id_version',
'start_position',
'end_position',
'description',
'external_gene_name',
'entrezgene_id',
'pfam'),
mart = fettet.anno)
Tx.ferret <- as_tibble(Tx.fetter)
Tx.ferret
Tx.ferret <- as_tibble(Tx.ferret)
Tx.ferret
library(rhdf5) #provides functions for handling hdf5 file formats (kallisto outputs bootstraps in this format)
library(tidyverse) # provides access to Hadley Wickham's collection of R packages for data science, which we will use throughout the course
library(tximport) # package for getting Kallisto results into R
library(ensembldb) #helps deal with ensembl
library(EnsDb.Hsapiens.v86) #replace with your organism-specific database package
library(beepr) #just for fun
library(datapasta) #makes it easy to copy and paste data into R
# read in your study design ----
#there are LOTS of ways to read data into R, but the readr package (from tidyverse) is one of the simplest
targets <- read_tsv("studydesign.txt")
# you can easily create file paths to the abundance files generated by Kallisto using the 'file.path' function
path <- file.path(targets$sample, "abundance.tsv") # set file paths to your mapped data
# now check to make sure this path is correct by seeing if the files exist
all(file.exists(path))
Tx <- transcripts(EnsDb.Hsapiens.v86, columns=c("tx_id", "gene_name"))
Tx <- as_tibble(Tx)
#need to change first column name to 'target_id'
Tx <- dplyr::rename(Tx, target_id = tx_id)
#transcrip ID needs to be the first column in the dataframe
Tx <- dplyr::select(Tx, "target_id", "gene_name")
library(biomaRt) # an alternative
listMarts() #default host is ensembl.org, and most current release of mammalian genomes
#choose the 'mart' you want to work with
myMart <- useMart(biomart="ENSEMBL_MART_ENSEMBL")
#take a look at all available datasets within the selected mart
available.datasets <- listDatasets(myMart)
#now grab the ensembl annotations for dog
dog.anno <- useMart(biomart="ENSEMBL_MART_ENSEMBL", dataset = "clfamiliaris_gene_ensembl")
fettet.anno <- useMart(biomart="ENSEMBL_MART_ENSEMBL", dataset = "mpfuro_gene_ensembl")
dog.attributes <- listAttributes(dog.anno)
ferret.attributes <- listAttributes(fettet.anno)
Tx.dog <- getBM(attributes=c('ensembl_transcript_id_version',
'external_gene_name'),
mart = dog.anno)
Tx.ferret <- getBM(attributes=c('ensembl_transcript_id_version',
'start_position',
'end_position',
'description',
'external_gene_name',
'entrezgene_id',
'pfam'),
mart = fettet.anno)
Tx.dog <- as_tibble(Tx.dog)
Tx.ferret <- as_tibble(Tx.ferret)
View(Tx.dog)
View(Tx.dog)
View(Tx.ferret)
View(Tx.ferret)
Tx.ferret <- dplyr::rename(Tx.ferret, target_id = ensembl_transcript_id_version,
gene_name = external_gene_name)
View(targets)
View(myMart)
?getSequence
Promoter_sequences = getSequence(id = "IFIT2", "OAS2", "IRF1", "IFNAR1", "MX1",
type = "ensembl_transcript_id_version",
seqType = "gene_flank",
upstream = 1000,
mart = fettet.anno)
Promoter_sequences = getSequence(id = c("IFIT2", "OAS2", "IRF1", "IFNAR1", "MX1"),
type = "ensembl_transcript_id_version",
seqType = "gene_flank",
upstream = 1000,
mart = fettet.anno)
Promoter_sequences = getSequence(id = c("IFIT2", "OAS2", "IRF1", "IFNAR1", "MX1"),
type = "external_gene_name",
seqType = "gene_flank",
upstream = 1000,
mart = fettet.anno)
Promoter_sequences = getSequence(id = c("IFIT2", "OAS2", "IRF1", "IFNAR1", "MX1"),
type = "gene_name",
seqType = "gene_flank",
upstream = 1000,
mart = fettet.anno)
listFilters()
getSequence:listFilters()
Promoter_sequences = getSequence(id = c("IFIT2", "OAS2", "IRF1", "IFNAR1", "MX1"),
type = "external_gene_name",
seqType = "gene_flank",
upstream = 1000,
mart = fettet.anno,
verbose = TRUE)
Promoter_sequences = getSequence(id = "IFIT2",
type = "external_gene_name",
seqType = "gene_flank",
upstream = 1000,
mart = fettet.anno,
verbose = TRUE)
Promoter_sequences = getSequence(id = "IFIT2",
type = "external_gene_name",
seqType = "gene_flank",
upstream = 1000,
mart = fettet.anno,
verbose = TRUE)
View(ferret.attributes)
View(fettet.anno)
View(fettet.anno@attributes)
Promoter_sequences = getSequence(id = "IFIT2",
type = "external_gene_name",
seqType = "coding_gene_flank",
upstream = 1000,
mart = fettet.anno,
verbose = TRUE)
Promoter_sequences = getSequence(id = "IFIT2",
type = "external_gene_name",
seqType = "coding_gene_flank",
mart = fettet.anno,
verbose = TRUE)
Promoter_sequences = getSequence(id = "IFIT2",
type = "ensembl",
seqType = "coding_gene_flank",
upstream = 1000,
mart = fettet.anno,
verbose = TRUE)
Promoter_sequences = getSequence(id = "IFIT2",
Promoter_sequences = getSequence(id = "IFIT2",
type = "ensembl_gene_id",
seqType = "coding_gene_flank",
upstream = 1000,
mart = fettet.anno,
verbose = TRUE)
Promoter_sequences
Promoter_sequences = getSequence(id = "IFIT2",
type = "ensembl_gene_id",
seqType = "coding_gene_flank",
upstream = 1000,
mart = fettet.anno)
Promoter_sequences
show(Promoter_sequences)
Promoter_sequences = getSequence(id = "IFIT2",
type = "external_gene_name",
seqType = "coding_gene_flank",
upstream = 1000,
mart = fettet.anno)
Promoter_sequences = getSequence(id = "IFIT2",
type = "ensembl_gene_id",
seqType = "gene_flank",
upstream = 1000,
mart = fettet.anno)
Promoter_sequences = getSequence(id = "IFIT2",
type = "ensembl_gene_id",
seqType = "gene_flank",
upstream = 1000,
mart = fettet.anno)
Promoter_sequences
Promoter_sequences = getSequence(id = "OAS2",
type = "ensembl_gene_id",
seqType = "gene_flank",
upstream = 1000,
mart = fettet.anno)
Promoter_sequences = getSequence(id = "IFIT2",
type = "ensembl_gene_id",
seqType = "gene_flank",
upstream = 1000,
mart = fettet.anno)
Promoter_IFIT2 = getSequence(id = "IFIT2",
type = "ensembl_gene_id",
seqType = "gene_flank",
upstream = 1000,
mart = fettet.anno)
Promoter_IFIT2
#get ferret promoter sequences (1kb upstream) for antiviral genes, IFIT2, OAS2, IRF1, IFNAR1, and MX1
??getSequence
View(Promoter_sequences)
View(Promoter_sequences)
Promoter_IFIT2 = getSequence(id = "IFIT2",
type = "external_gene_name",
seqType = "gene_flank",
upstream = 1000,
mart = fettet.anno)
fettet.anno@attributes[["name"]]
fettet.anno@attributes[["gene"]]
fettet.anno@attributes[["external_gene_name"]]
ferret.anno@attributes[["gene"]]
View(Tx.ferret)
ferret.attributes
Promoter_IFIT2 = getSequence(id = c("IFIT2", "OAS2", "IRF1", "IFNAR1", "MX1"),
type = "hgnc_symbol",
seqType = "gene_flank",
upstream = 1000,
mart = fettet.anno)
fettet.anno <- useMart(biomart="ENSEMBL_MART_ENSEMBL", dataset = "mpfuro_gene_ensembl")
Promoter_sequences = getSequence(id = c("IFIT2", "OAS2", "IRF1", "IFNAR1", "MX1"),
type = "hgnc_symbol",
seqType = "gene_flank",
upstream = 1000,
mart = fettet.anno)
library(rhdf5) #provides functions for handling hdf5 file formats (kallisto outputs bootstraps in this format)
library(tidyverse) # provides access to Hadley Wickham's collection of R packages for data science, which we will use throughout the course
library(tximport) # package for getting Kallisto results into R
library(ensembldb) #helps deal with ensembl
library(EnsDb.Hsapiens.v86) #replace with your organism-specific database package
library(beepr) #just for fun
library(datapasta) #mak
library(biomaRt) # an alternative for annotation
listMarts() #default host is ensembl.org, and most current release of mammalian genomes
#listMarts(host="parasite.wormbase.org") #access to parasite worm genomes
#listMarts(host="protists.ensembl.org") #access to protozoan genomes
#choose the 'mart' you want to work with
myMart <- useMart(biomart="ENSEMBL_MART_ENSEMBL")
#take a look at all available datasets within the selected mart
available.datasets <- listDatasets(myMart)
#now grab the ensembl annotations for dog
dog.anno <- useMart(biomart="ENSEMBL_MART_ENSEMBL", dataset = "clfamiliaris_gene_ensembl")
fettet.anno <- useMart(biomart="ENSEMBL_MART_ENSEMBL", dataset = "mpfuro_gene_ensembl")
dog.attributes <- listAttributes(dog.anno)
ferret.attributes <- listAttributes(fettet.anno)
Tx.dog <- getBM(attributes=c('ensembl_transcript_id_version',
'external_gene_name'),
mart = dog.anno)
Tx.ferret <- getBM(attributes=c('ensembl_transcript_id_version',
'start_position',
'end_position',
'description',
'external_gene_name',
'entrezgene_id',
'pfam'),
mart = fettet.anno)
Tx.dog <- as_tibble(Tx.dog)
Tx.ferret <- as_tibble(Tx.ferret)
#we need to rename the two columns we just retrieved from biomart
Tx.dog <- dplyr::rename(Tx.dog, target_id = ensembl_transcript_id_version,
gene_name = external_gene_name)
Tx.ferret <- dplyr::rename(Tx.ferret, target_id = ensembl_transcript_id_version,
gene_name = external_gene_name)
Promoter_sequences = getSequence(id = c("IFIT2", "OAS2", "IRF1", "IFNAR1", "MX1"),
type = "hgnc_symbol",
seqType = "gene_flank",
upstream = 1000,
mart = fettet.anno)
Promoter_sequences = getSequence(id = c("IFIT2", "OAS2", "IRF1", "IFNAR1", "MX1"),
type = "hgnc_symbol",
seqType = "gene_flank",
upstream = 1000,
mart = ferret.anno)
ferret.anno <- useMart(biomart="ENSEMBL_MART_ENSEMBL", dataset = "mpfuro_gene_ensembl")
Promoter_sequences = getSequence(id = c("IFIT2", "OAS2", "IRF1", "IFNAR1", "MX1"),
type = "hgnc_symbol",
seqType = "gene_flank",
upstream = 1000,
mart = ferret.anno)
Promoter_sequences
